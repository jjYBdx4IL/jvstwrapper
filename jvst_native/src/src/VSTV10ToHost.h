/* 
 * jVSTwRapper - The Java way into VST world!
 * 
 * jVSTwRapper is an easy and reliable Java Wrapper for the Steinberg VST interface. 
 * It enables you to develop VST 2.3 compatible audio plugins and virtual instruments 
 * plus user interfaces with the Java Programming Language. 3 Demo Plugins(+src) are included!
 * 
 * Copyright (C) 2006  Daniel Martin [daniel309@users.sourceforge.net] 
 * 					   and many others, see CREDITS.txt
 *
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class jvst_wrapper_communication_VSTV10ToHost */

#ifndef _Included_jvst_wrapper_communication_VSTV10ToHost
#define _Included_jvst_wrapper_communication_VSTV10ToHost
#ifdef __cplusplus
extern "C" {
#endif
/* Inaccessible static: logBasePath */
/* Inaccessible static: logFileName */
/* Inaccessible static: logEnabled */
/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    setUniqueID
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_setUniqueID
  (JNIEnv *, jobject, jint);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    setNumInputs
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_setNumInputs
  (JNIEnv *, jobject, jint);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    setNumOutputs
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_setNumOutputs
  (JNIEnv *, jobject, jint);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    hasVu
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_hasVu
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    hasClip
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_hasClip
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    canMono
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_canMono
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    canProcessReplacing
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_canProcessReplacing
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    setRealtimeQualities
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_setRealtimeQualities
  (JNIEnv *, jobject, jint);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    setOfflineQualities
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_setOfflineQualities
  (JNIEnv *, jobject, jint);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    setInitialDelay
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_setInitialDelay
  (JNIEnv *, jobject, jint);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    programsAreChunks
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_programsAreChunks
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    getSampleRate
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_getSampleRate
  (JNIEnv *, jobject);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    getBlockSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_getBlockSize
  (JNIEnv *, jobject);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    setParameterAutomated
 * Signature: (IF)V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_setParameterAutomated
  (JNIEnv *, jobject, jint, jfloat);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    getMasterVersion
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_getMasterVersion
  (JNIEnv *, jobject);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    getCurrentUniqueId
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_getCurrentUniqueId
  (JNIEnv *, jobject);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    masterIdle
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_masterIdle
  (JNIEnv *, jobject);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    isInputConnected
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_isInputConnected
  (JNIEnv *, jobject, jint);

/*
 * Class:     jvst_wrapper_communication_VSTV10ToHost
 * Method:    isOutputConnected
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_jvst_wrapper_communication_VSTV10ToHost_isOutputConnected
  (JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
