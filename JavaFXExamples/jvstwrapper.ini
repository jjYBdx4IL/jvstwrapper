#/* 
# * jVSTwRapper - The Java way into VST world!
# * 
# * jVSTwRapper is an easy and reliable Java Wrapper for the Steinberg VST interface. 
# * It enables you to develop VST 2.3 compatible audio plugins and virtual instruments 
# * plus user interfaces with the Java Programming Language. 3 Demo Plugins(+src) are included!
# * 
# * Copyright (C) 2006  Daniel Martin [daniel309@users.sourceforge.net] 
# * 			and many others, see CREDITS.txt
# *
# *
# * This library is free software; you can redistribute it and/or
# * modify it under the terms of the GNU Lesser General Public
# * License as published by the Free Software Foundation; either
# * version 2.1 of the License, or (at your option) any later version.
# *
# * This library is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# * Lesser General Public License for more details.
# *
# * You should have received a copy of the GNU Lesser General Public
# * License along with this library; if not, write to the Free Software
# * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# */



#jVSTwRapper configuration
#*******************************************************************

# Please NOTE: Rename the jVSTwRapper.dll to the name of your .ini file. 
# Only if you do this the wrapper will be initialised correctly and your 
# plugin will work. You can choose any valid filename for that (This name 
# will also be your plugin name in the audio app). Make sure, that the .dll and 
# the .ini file both have the same name (without the file extension).




# This section descibes the java classes which implement your plugin.
# USE "/ notation" (e.g java/lang/String) and fully 
# qualified class names

# this config value is MANDATORY!
# ******************************************************************
#PluginClass=jvst/examples/jayvstxsynth/JayVSTxSynth
#PluginClass=jvst/examples/jaydlay/JayDLay
#PluginClass=jvst/examples/dreinulldrei/DreiNullDrei

PluginClass=jvst/examples/javafx/fxdelay/FXDelay



# If your Plug doesnt have a custom user interface (UI), simply comment out
# the following line (prefix it with a #)

# this config value is OPTIONAL!
# ******************************************************************
#PluginUIClass=jvst/examples/jayvstxsynth/JayVSTxSynthNapkinGUI
#PluginUIClass=jvst/examples/jaydlay/JayDLayGUI
#PluginUIClass=jvst/examples/dreinulldrei/DreiNullDreiGUI

PluginUIClass=jvst/examples/javafx/fxdelay/FXDelayGUIDelegator
#PluginUIClass=jvst/examples/javafx/fxdemo/FXDemoGUIDelegator


# Heres your ClassPath for your plugin. Please include all .jar files and 
# dont forget the jVSTwRapper_bin.jar
# Note: The directory where your plug is stored is added by default.
# Please use the {WrapperPath} variable here. It will be replaced with the 
# Path where your wrapper dll is located and makes it possible to use relative paths
# for the used jars.
 
# this config value is MANDATORY!
# ******************************************************************
ClassPath={WrapperPath}\dist\lib\jVSTwRapper_bin.jar;{WrapperPath}\dist\lib\jVSTeXamples_bin.jar;{WrapperPath}\dist\JavaFXExamples.jar;{WrapperPath}\dist\lib\javafxrt.jar;{WrapperPath}\dist\lib\javafx-ui-common.jar;{WrapperPath}\dist\lib\javafx-ui-controls.jar;{WrapperPath}\dist\lib\javafx-ui-desktop.jar;{WrapperPath}\dist\lib\javafx-sg-swing.jar;{WrapperPath}\dist\lib\javafx-sg-common.jar;{WrapperPath}\dist\lib\javafx-geom.jar;{WrapperPath}\dist\lib\javafx-anim.jar;{WrapperPath}\dist\lib\decora-runtime.jar;{WrapperPath}\dist\lib\websvc.jar;{WrapperPath}\dist\lib\javafx-common.jar

# The libs here are added to the Bootstrap Classloader. Please dont modify any value 
# here. Especially, dont add your plug classes or the jVSTwRapper.jar. If you 
# do so, all native calls will be dispatched to just one library and will cause the JVM 
# to terminate if more than one plugin is used at the same time.

# this config value is MANDATORY!
# ******************************************************************
SystemClassPath={WrapperPath}\dist\lib\jVSTsYstem_bin.jar;{WrapperPath}\dist\JavaFXExamples.jar


# Set this value to 0 if you dont want the *_java_stdout.txt and *_log.txt to 
# be created.

# this config value is OPTIONAL!
# ******************************************************************
IsLoggingEnabled=1


# WINDOWS ONLY OPTION!
# this config value is OPTIONAL!
# ******************************************************************
#CustomJVMLocation=C:\Program Files\Java\JDK\...


# For the Mac, you can even use the revision version (e.g. 1.4.2). 
# On windows, only the first 2 numbers (e.g. 1.4) are allowed.
# If the desired JVM version given below is not found, we always fall back 
# to the default JVM version installed and load this one. 

# this config value is OPTIONAL!
# ******************************************************************
#RequestJVMVersion=1.6


# Set this value to 0 if there are display-errors or if your host crashes when 
# the plug starts its custom GUI. If set to 0, jVSTwRapper opens its own (java) window 
# for the custom GUI. This window is a top level window and therefore not integrated into 
# the host application (e.g. as mdi child). Most hosts open 2 windows now. One for the native GUI that 
# doesnt display anything, and another (top-level, java) window for the GUI. (Look at "CloseNativePluginWindow" 
# to tweak this behavior). If set to 1, jVSTwRapper tries to use the window opened by the host 
# to draw its custom GUI. This means your java plug totally looks like a native vst plugin. 

# this config value is OPTIONAL!
# ******************************************************************
AttachToNativePluginWindow=0



# You can specify custom JVM Startup options here. (Max 5 though, use JVMOption1...JVMOption5)
# WARNING: providing ANY option, which is not recognized by your 
# JVM will cause it fail to start. So be sure to use a correct JVM Startup option here.

# these config values are OPTIONAL!
# Note: In order to use remote debugging on a 1.4 jVM enable the first 4 Options and MAKE SURE
# that you use a free local TCP port. Then use e.g. eclipse remote debug configuration to connect to 
# the suspended audio app. 
# ******************************************************************
#JVMOption1=-Xdebug
#JVMOption2=-Xnoagent
#JVMOption3=-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#JVMOption4=-Djava.compiler=NONE

#JVMOption5=-verbose:jni

#JVMOption1=-Xnoclassgc
#JVMOption1=-Xloggc:c:\gclog.txt
#JVMOption3=-Xrs


#END of INI file
#Please do not remove comments